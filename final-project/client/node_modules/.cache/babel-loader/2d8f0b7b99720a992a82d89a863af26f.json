{"ast":null,"code":"var _jsxFileName = \"/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState, useEffect } from 'react'; // import library that wraps around Spotify API so it's easier to interact with the API\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Login from './components/Login';\nimport Homepage from './components/Homepage';\nimport Analytics from './components/Analytics';\nimport { useDataLayerValue } from './DataLayer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  _s();\n\n  const [token, setToken] = useState(null); // dispatch is a way for us to access the data in the data layer \n  // pulling user from data layer using \n\n  const [{\n    top_artist,\n    user_playlists,\n    top_track\n  }, dispatch] = useDataLayerValue();\n  /* Function to extract the code from the URL that is given by the Spotify API after user gives permission. */\n\n  const getTokenFromUrl = () => {\n    return window.location.hash.substring(1).split('&').reduce(function (initial, item) {\n      if (item) {\n        var parts = item.split('=');\n        initial[parts[0]] = decodeURIComponent(parts[1]);\n      }\n\n      return initial;\n    }, {});\n  }; // execute the function below once\n\n\n  useEffect(() => {\n    // extract token from URL after user gives permission \n    const hash = getTokenFromUrl();\n    const _token = hash.access_token; // erase the token from the URL to hide the token \n\n    window.location.hash = \"\";\n\n    if (_token) {\n      // if successfully authenticated and received a token\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token\n      });\n      setToken(_token);\n      spotify.setAccessToken(_token); // gives token to the Spotify API wrapper\n\n      spotify.getMe() // return the authenticated user\n      .then(user => {\n        dispatch({\n          // \n          type: \"SET_USER\",\n          user: user\n        });\n      });\n      spotify.getUserPlaylists({\n        limit: 10\n      }).then(playlists => {\n        dispatch({\n          type: \"SET_USER_PLAYLIST\",\n          user_playlists: playlists\n        });\n      });\n      spotify.getMyTopArtists().then(top_artist => {\n        dispatch({\n          type: \"SET_TOP_ARTIST\",\n          top_artist: top_artist\n        });\n      });\n      spotify.getMyTopTracks().then(top_track => {\n        dispatch({\n          type: \"SET_TOP_TRACK\",\n          top_track: top_track\n        });\n      }); // a timeline of the user's top tracks\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children:\n    /* \n    \n    If the token is successfully extracted from URL, display the homepage. \n    Else, re-direct to login page.\n     */\n    token ? /*#__PURE__*/_jsxDEV(Analytics, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"q/RO+ERXEAHmSjnIhsKJyDuSFJ8=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/App.js"],"names":["useState","useEffect","SpotifyWebApi","Login","Homepage","Analytics","useDataLayerValue","spotify","App","token","setToken","top_artist","user_playlists","top_track","dispatch","getTokenFromUrl","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","_token","access_token","type","setAccessToken","getMe","then","user","getUserPlaylists","limit","playlists","getMyTopArtists","getMyTopTracks"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\n\n// import library that wraps around Spotify API so it's easier to interact with the API\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Login from './components/Login';\nimport Homepage from './components/Homepage';\nimport Analytics from './components/Analytics';\nimport { useDataLayerValue } from './DataLayer';\n\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n\n  const [token, setToken] = useState(null);\n  // dispatch is a way for us to access the data in the data layer \n  // pulling user from data layer using \n  const [{ top_artist, user_playlists, top_track }, dispatch ] = useDataLayerValue();\n\n  /* Function to extract the code from the URL that is given by the Spotify API after user gives permission. */\n  const getTokenFromUrl = () => {\n    return window.location.hash\n        .substring(1)\n        .split('&')\n        .reduce(function(initial, item) {\n            if (item) {\n                var parts = item.split('=');\n                initial[parts[0]] = decodeURIComponent(parts[1]);\n            }\n            return initial;\n        }, {});\n  }\n\n  // execute the function below once\n  useEffect(() => { \n\n    // extract token from URL after user gives permission \n    const hash = getTokenFromUrl();\n    const _token = hash.access_token;\n    // erase the token from the URL to hide the token \n    window.location.hash = \"\";\n\n    if (_token) { // if successfully authenticated and received a token\n\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      })\n      setToken(_token);\n      spotify.setAccessToken(_token); // gives token to the Spotify API wrapper\n      \n      spotify.getMe() // return the authenticated user\n      .then((user) => {\n        dispatch({ // \n          type: \"SET_USER\",\n          user: user,\n        })\n      })\n      \n      spotify.getUserPlaylists({limit : 10})\n      .then((playlists) => {\n        dispatch({\n          type: \"SET_USER_PLAYLIST\",\n          user_playlists: playlists,\n        })\n      })\n\n\n      spotify.getMyTopArtists()\n      .then((top_artist) => {\n        dispatch({ \n          type: \"SET_TOP_ARTIST\",\n          top_artist: top_artist,\n        })\n\n      })\n\n      spotify.getMyTopTracks() \n      .then((top_track) => {\n        dispatch({\n          type: \"SET_TOP_TRACK\",\n          top_track: top_track,\n        })\n      })\n\n    // a timeline of the user's top tracks\n\n    }\n  }, [])\n\n  \n  return (\n    <>\n        {\n        \n        /* \n        \n        If the token is successfully extracted from URL, display the homepage. \n        Else, re-direct to login page.\n\n        */\n\n        token ? (\n          <Analytics />\n        ) : (\n          <Login />\n        )\n        \n        }\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}