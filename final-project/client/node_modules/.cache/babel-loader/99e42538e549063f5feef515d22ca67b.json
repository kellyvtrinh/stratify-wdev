{"ast":null,"code":"var _jsxFileName = \"/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar';\nimport { useDataLayerValue } from '../../src/DataLayer';\nimport { Chrono } from \"react-chrono\";\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport { Chart } from 'react-chartjs-2';\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Analytics() {\n  _s();\n\n  var _top_track$items;\n\n  // access user playlist from the data layer\n  const [{\n    user_playlists,\n    top_track\n  }, dispatch] = useDataLayerValue(); // map \n  // console.log(\"sorted_dates\", sortedStrings);\n  // a timeline of the user's top tracks\n\n  const num_tracks = top_track === null || top_track === void 0 ? void 0 : top_track.items.length;\n  var sorted_track_dates = top_track === null || top_track === void 0 ? void 0 : (_top_track$items = top_track.items) === null || _top_track$items === void 0 ? void 0 : _top_track$items.map(track => track.album.release_date).sort((a, b) => {\n    var aComps = a.split(\"-\");\n    var bComps = b.split(\"-\");\n    var aDate = new Date(aComps[0], aComps[1], aComps[2]);\n    var bDate = new Date(bComps[0], bComps[1], bComps[2]);\n    return aDate.getTime() - bDate.getTime();\n  });\n  var sorted_tracks_by_date = new Array(num_tracks);\n\n  for (let i = 0; i < num_tracks; i++) {\n    var curr_track = top_track === null || top_track === void 0 ? void 0 : top_track.items[i];\n    var curr_track_date = curr_track.album.release_date;\n    var idx = sorted_track_dates.indexOf(curr_track_date);\n    sorted_tracks_by_date[idx] = curr_track;\n  }\n\n  var top_tracks_timeline = new Array(num_tracks);\n\n  for (const i in sorted_tracks_by_date) {\n    var track = sorted_tracks_by_date;\n    var hello = {\n      title: \"hello\",\n      cardTitle: track.name,\n      media: {\n        type: \"IMAGE\",\n        source: {\n          url: track.album.images[0].url\n        }\n      }\n    };\n    console.log(hello);\n  }\n\n  console.log(\"test\", top_tracks_timeline);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Analytics, \"FAT/QTKWYgd0xlD2lsf9wB9vQQ0=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Analytics;\nexport default Analytics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"sources":["/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js"],"names":["React","useState","Bar","Line","Sidebar","useDataLayerValue","Chrono","Chart","ChartJS","Analytics","user_playlists","top_track","dispatch","num_tracks","items","length","sorted_track_dates","map","track","album","release_date","sort","a","b","aComps","split","bComps","aDate","Date","bDate","getTime","sorted_tracks_by_date","Array","i","curr_track","curr_track_date","idx","indexOf","top_tracks_timeline","hello","title","cardTitle","name","media","type","source","url","images","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar'\nimport { useDataLayerValue } from '../../src/DataLayer'\nimport { Chrono } from \"react-chrono\";\n\nimport { Chart as ChartJS } from 'chart.js/auto'\nimport { Chart }            from 'react-chartjs-2'\n\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nfunction Analytics() {\n\n    // access user playlist from the data layer\n    const [{ user_playlists, top_track }, dispatch] = useDataLayerValue();\n\n    // map \n\n\n    \n\n    // console.log(\"sorted_dates\", sortedStrings);\n\n    // a timeline of the user's top tracks\n\n    const num_tracks = top_track?.items.length;\n\n    var sorted_track_dates = top_track?.items?.map((track) => (track.album.release_date)).sort((a,b) => {\n        var aComps = a.split(\"-\");\n        var bComps = b.split(\"-\");\n        var aDate = new Date(aComps[0], aComps[1], aComps[2]);\n        var bDate = new Date(bComps[0], bComps[1], bComps[2]);\n        return aDate.getTime() - bDate.getTime();\n    });\n\n    var sorted_tracks_by_date = new Array(num_tracks);\n\n    for (let i=0; i < num_tracks; i++) {\n        var curr_track = top_track?.items[i]\n        var curr_track_date = curr_track.album.release_date;\n        var idx = sorted_track_dates.indexOf(curr_track_date);\n        sorted_tracks_by_date[idx] = curr_track\n\n    }\n\n    var top_tracks_timeline = new Array(num_tracks);\n\n    for (const i in sorted_tracks_by_date) {\n        var track = sorted_tracks_by_date\n        var hello = {\n            title: \"hello\", \n            cardTitle: track.name,\n            media: {\n                type: \"IMAGE\",\n                source: {\n                    url: track.album.images[0].url\n                }\n            }\n        }\n        console.log(hello)\n    }\n\n\n    console.log(\"test\", top_tracks_timeline)\n\n        \n    return (\n        \n        <div className=\"homepage\">\n            <Sidebar />\n            {/* <div style={{ width: \"1500px\", height: \"2000px\"}}>\n            <Chrono items={\n                \n            } mode=\"HORIZONTAL\" cardHeight={50} cardWidth={200} itemWidth={800}/>\n            </div> */}\n            {/* <Bar\n                data={{\n                    labels: user_playlists?.items?.map((playlist) => (playlist.name)),\n                    datasets: [\n                    {\n                        label: 'Number of tracks your playlists',\n                        backgroundColor: 'rgba(75,33,121,1)',\n                        borderColor: 'rgba(0,0,0,1)',\n                        borderWidth: 2,\n                        data: user_playlists?.items?.map((playlist) => (playlist.tracks.total)),\n                        \n                    }\n                    ]\n                }}\n            /> */}\n\n        </div>\n\n    )\n\n}\n\nexport default Analytics\n"]},"metadata":{},"sourceType":"module"}