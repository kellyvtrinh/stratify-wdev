{"ast":null,"code":"var _jsxFileName = \"/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar';\nimport { useDataLayerValue } from '../../src/DataLayer';\nimport { Chrono } from \"react-chrono\";\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport { Chart } from 'react-chartjs-2';\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Analytics() {\n  _s();\n\n  // access user playlist from the data layer\n  const [{\n    user_playlists,\n    top_track\n  }, dispatch] = useDataLayerValue();\n  data.sort(function (a, b) {\n    a = a.split('/').reverse().join('');\n    b = b.split('/').reverse().join('');\n    return a > b ? 1 : a < b ? -1 : 0; // return a.localeCompare(b);         // <-- alternative \n  }); // a timeline of the user's top tracks\n\n  const top_tracks_timeline = top_track.items.map((track, index) => ({\n    title: track.album.release_date,\n    cardTitle: track.name,\n    media: {\n      type: \"IMAGE\",\n      source: {\n        url: track.album.images[0].url\n      }\n    }\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"1500px\",\n        height: \"2000px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Chrono, {\n        items: top_tracks_timeline,\n        mode: \"HORIZONTAL\",\n        cardHeight: 50,\n        cardWidth: 200,\n        itemWidth: 800\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Analytics, \"FAT/QTKWYgd0xlD2lsf9wB9vQQ0=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Analytics;\nexport default Analytics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"sources":["/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js"],"names":["React","useState","Bar","Line","Sidebar","useDataLayerValue","Chrono","Chart","ChartJS","Analytics","user_playlists","top_track","dispatch","data","sort","a","b","split","reverse","join","top_tracks_timeline","items","map","track","index","title","album","release_date","cardTitle","name","media","type","source","url","images","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,SAASC,KAAK,IAAIC,OAAlB,QAAiC,eAAjC;AACA,SAASD,KAAT,QAAiC,iBAAjC;AAEA;AACA;AACA;AACA;;;;AAEA,SAASE,SAAT,GAAqB;AAAA;;AAEjB;AACA,QAAM,CAAC;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAD,EAAgCC,QAAhC,IAA4CP,iBAAiB,EAAnE;AAEAQ,EAAAA,IAAI,CAACC,IAAL,CAAU,UAASC,CAAT,EAAWC,CAAX,EAAc;AACpBD,IAAAA,CAAC,GAAGA,CAAC,CAACE,KAAF,CAAQ,GAAR,EAAaC,OAAb,GAAuBC,IAAvB,CAA4B,EAA5B,CAAJ;AACAH,IAAAA,CAAC,GAAGA,CAAC,CAACC,KAAF,CAAQ,GAAR,EAAaC,OAAb,GAAuBC,IAAvB,CAA4B,EAA5B,CAAJ;AACA,WAAOJ,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAYD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAhC,CAHoB,CAIpB;AACD,GALH,EALiB,CAajB;;AACA,QAAMI,mBAAmB,GAAGT,SAAS,CAACU,KAAV,CAAgBC,GAAhB,CAAoB,CAACC,KAAD,EAAQC,KAAR,MAAmB;AAC/DC,IAAAA,KAAK,EAAEF,KAAK,CAACG,KAAN,CAAYC,YAD4C;AAE/DC,IAAAA,SAAS,EAAEL,KAAK,CAACM,IAF8C;AAG/DC,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAE,OADH;AAEHC,MAAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAEV,KAAK,CAACG,KAAN,CAAYQ,MAAZ,CAAmB,CAAnB,EAAsBD;AADvB;AAFL;AAHwD,GAAnB,CAApB,CAA5B;AAWA,sBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE,QAAT;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAAZ;AAAA,6BACA,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAEhB,mBAAf;AAAoC,QAAA,IAAI,EAAC,YAAzC;AAAsD,QAAA,UAAU,EAAE,EAAlE;AAAsE,QAAA,SAAS,EAAE,GAAjF;AAAsF,QAAA,SAAS,EAAE;AAAjG;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AA2BH;;GApDQX,S;UAG6CJ,iB;;;KAH7CI,S;AAsDT,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport {Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar'\nimport { useDataLayerValue } from '../../src/DataLayer'\nimport { Chrono } from \"react-chrono\";\n\nimport { Chart as ChartJS } from 'chart.js/auto'\nimport { Chart }            from 'react-chartjs-2'\n\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nfunction Analytics() {\n\n    // access user playlist from the data layer\n    const [{ user_playlists, top_track }, dispatch] = useDataLayerValue();\n\n    data.sort(function(a,b) {\n        a = a.split('/').reverse().join('');\n        b = b.split('/').reverse().join('');\n        return a > b ? 1 : a < b ? -1 : 0;\n        // return a.localeCompare(b);         // <-- alternative \n      });\n    \n\n    // a timeline of the user's top tracks\n    const top_tracks_timeline = top_track.items.map((track, index) => ({\n        title: track.album.release_date, \n        cardTitle: track.name,\n        media: {\n            type: \"IMAGE\",\n            source: {\n                url: track.album.images[0].url\n            }\n        }\n    }))\n        \n    return (\n        \n        <div className=\"homepage\">\n            <Sidebar />\n            <div style={{ width: \"1500px\", height: \"2000px\"}}>\n            <Chrono items={top_tracks_timeline} mode=\"HORIZONTAL\" cardHeight={50} cardWidth={200} itemWidth={800}/>\n            </div>\n            {/* <Bar\n                data={{\n                    labels: user_playlists?.items?.map((playlist) => (playlist.name)),\n                    datasets: [\n                    {\n                        label: 'Number of tracks your playlists',\n                        backgroundColor: 'rgba(75,33,121,1)',\n                        borderColor: 'rgba(0,0,0,1)',\n                        borderWidth: 2,\n                        data: user_playlists?.items?.map((playlist) => (playlist.tracks.total)),\n                        \n                    }\n                    ]\n                }}\n            /> */}\n\n        </div>\n\n    )\n\n}\n\nexport default Analytics\n"]},"metadata":{},"sourceType":"module"}