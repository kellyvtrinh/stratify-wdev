{"ast":null,"code":"var _jsxFileName = \"/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar';\nimport { useDataLayerValue } from '../../src/DataLayer';\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport Chart from \"react-google-charts\";\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Analytics() {\n  _s();\n\n  var _top_track$items, _user_playlists$items, _user_playlists$items2;\n\n  const [{\n    user_playlists,\n    top_track\n  }, dispatch] = useDataLayerValue(); // cardHeight={50} cardWidth={200} itemWidth={800}\n\n  const top_tracks_timeline = top_track === null || top_track === void 0 ? void 0 : (_top_track$items = top_track.items) === null || _top_track$items === void 0 ? void 0 : _top_track$items.map(track => {\n    var _track$album, _track$album2;\n\n    return {\n      title: track === null || track === void 0 ? void 0 : (_track$album = track.album) === null || _track$album === void 0 ? void 0 : _track$album.release_date,\n      cardTitle: track === null || track === void 0 ? void 0 : track.name,\n      media: {\n        type: \"IMAGE\",\n        source: {\n          url: track === null || track === void 0 ? void 0 : (_track$album2 = track.album) === null || _track$album2 === void 0 ? void 0 : _track$album2.images[0].url\n        }\n      }\n    };\n  });\n  console.log(\"top_tracks_timeline\", top_tracks_timeline);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels: user_playlists === null || user_playlists === void 0 ? void 0 : (_user_playlists$items = user_playlists.items) === null || _user_playlists$items === void 0 ? void 0 : _user_playlists$items.map(playlist => playlist.name),\n        datasets: [{\n          label: 'Number of tracks your playlists',\n          backgroundColor: 'rgba(75,33,121,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: user_playlists === null || user_playlists === void 0 ? void 0 : (_user_playlists$items2 = user_playlists.items) === null || _user_playlists$items2 === void 0 ? void 0 : _user_playlists$items2.map(playlist => playlist.tracks.total)\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      width: '500px',\n      height: '300px',\n      chartType: \"Timeline\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this),\n      data: [[{\n        type: 'string',\n        id: 'Term'\n      }, {\n        type: 'string',\n        id: 'Name'\n      }, {\n        type: 'date',\n        id: 'Start'\n      }, {\n        type: 'date',\n        id: 'End'\n      }], ['1', 'George Washington', new Date(1789, 3, 30), new Date(1797, 2, 4)], ['2', 'John Adams', new Date(1797, 2, 4), new Date(1801, 2, 4)], ['3', 'Thomas Jefferson', new Date(1801, 2, 4), new Date(1809, 2, 4)]],\n      rootProps: {\n        'data-testid': '2'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Analytics, \"FAT/QTKWYgd0xlD2lsf9wB9vQQ0=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Analytics;\nexport default Analytics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"sources":["/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js"],"names":["React","useState","Bar","Line","Sidebar","useDataLayerValue","Chart","ChartJS","Analytics","user_playlists","top_track","dispatch","top_tracks_timeline","items","map","track","title","album","release_date","cardTitle","name","media","type","source","url","images","console","log","labels","playlist","datasets","label","backgroundColor","borderColor","borderWidth","data","tracks","total","id","Date"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SAASC,KAAK,IAAIC,OAAlB,QAAiC,eAAjC;AACA,OAAOD,KAAP,MAAkB,qBAAlB;AAGA;AACA;AACA;AACA;;;;AAEA,SAASE,SAAT,GAAqB;AAAA;;AAAA;;AAEjB,QAAM,CAAC;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,GAAD,EAAgCC,QAAhC,IAA4CN,iBAAiB,EAAnE,CAFiB,CAKjB;;AAEA,QAAMO,mBAAmB,GAAGF,SAAH,aAAGA,SAAH,2CAAGA,SAAS,CAAEG,KAAd,qDAAG,iBAAkBC,GAAlB,CAAuBC,KAAD;AAAA;;AAAA,WAAY;AAC1DC,MAAAA,KAAK,EAAED,KAAF,aAAEA,KAAF,uCAAEA,KAAK,CAAEE,KAAT,iDAAE,aAAcC,YADqC;AAEtDC,MAAAA,SAAS,EAAEJ,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEK,IAFoC;AAGtDC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,OADH;AAEHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,GAAG,EAAET,KAAF,aAAEA,KAAF,wCAAEA,KAAK,CAAEE,KAAT,kDAAE,cAAcQ,MAAd,CAAqB,CAArB,EAAwBD;AADzB;AAFL;AAH+C,KAAZ;AAAA,GAAtB,CAA5B;AAWAE,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCf,mBAAnC;AAGA,sBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,GAAD;AACI,MAAA,IAAI,EAAE;AACFgB,QAAAA,MAAM,EAAEnB,cAAF,aAAEA,cAAF,gDAAEA,cAAc,CAAEI,KAAlB,0DAAE,sBAAuBC,GAAvB,CAA4Be,QAAD,IAAeA,QAAQ,CAACT,IAAnD,CADN;AAEFU,QAAAA,QAAQ,EAAE,CACV;AACIC,UAAAA,KAAK,EAAE,iCADX;AAEIC,UAAAA,eAAe,EAAE,mBAFrB;AAGIC,UAAAA,WAAW,EAAE,eAHjB;AAIIC,UAAAA,WAAW,EAAE,CAJjB;AAKIC,UAAAA,IAAI,EAAE1B,cAAF,aAAEA,cAAF,iDAAEA,cAAc,CAAEI,KAAlB,2DAAE,uBAAuBC,GAAvB,CAA4Be,QAAD,IAAeA,QAAQ,CAACO,MAAT,CAAgBC,KAA1D;AALV,SADU;AAFR;AADV;AAAA;AAAA;AAAA;AAAA,YAJJ,eAoBA,QAAC,KAAD;AACA,MAAA,KAAK,EAAE,OADP;AAEA,MAAA,MAAM,EAAE,OAFR;AAGA,MAAA,SAAS,EAAC,UAHV;AAIA,MAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJR;AAKA,MAAA,IAAI,EAAE,CACF,CACA;AAAEf,QAAAA,IAAI,EAAE,QAAR;AAAkBgB,QAAAA,EAAE,EAAE;AAAtB,OADA,EAEA;AAAEhB,QAAAA,IAAI,EAAE,QAAR;AAAkBgB,QAAAA,EAAE,EAAE;AAAtB,OAFA,EAGA;AAAEhB,QAAAA,IAAI,EAAE,MAAR;AAAgBgB,QAAAA,EAAE,EAAE;AAApB,OAHA,EAIA;AAAEhB,QAAAA,IAAI,EAAE,MAAR;AAAgBgB,QAAAA,EAAE,EAAE;AAApB,OAJA,CADE,EAOF,CAAC,GAAD,EAAM,mBAAN,EAA2B,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAA3B,EAAkD,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAlD,CAPE,EAQF,CAAC,GAAD,EAAM,YAAN,EAAoB,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAApB,EAA0C,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAA1C,CARE,EASF,CAAC,GAAD,EAAM,kBAAN,EAA0B,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAA1B,EAAgD,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAhD,CATE,CALN;AAgBA,MAAA,SAAS,EAAE;AAAE,uBAAe;AAAjB;AAhBX;AAAA;AAAA;AAAA;AAAA,YApBA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAqDH;;GA1EQ/B,S;UAE6CH,iB;;;KAF7CG,S;AA4ET,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport {Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar'\nimport { useDataLayerValue } from '../../src/DataLayer'\n\nimport { Chart as ChartJS } from 'chart.js/auto'\nimport Chart from \"react-google-charts\";\n \n\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nfunction Analytics() {\n\n    const [{ user_playlists, top_track }, dispatch] = useDataLayerValue();\n    \n\n    // cardHeight={50} cardWidth={200} itemWidth={800}\n\n    const top_tracks_timeline = top_track?.items?.map((track) => ({\n        title: track?.album?.release_date, \n            cardTitle: track?.name,\n            media: {\n                type: \"IMAGE\",\n                source: {\n                    url: track?.album?.images[0].url\n                }\n            }\n    }))\n\n    console.log(\"top_tracks_timeline\", top_tracks_timeline)\n\n \n    return (\n        \n        <div className=\"homepage\">\n            <Sidebar />\n            \n\n            <Bar\n                data={{\n                    labels: user_playlists?.items?.map((playlist) => (playlist.name)),\n                    datasets: [\n                    {\n                        label: 'Number of tracks your playlists',\n                        backgroundColor: 'rgba(75,33,121,1)',\n                        borderColor: 'rgba(0,0,0,1)',\n                        borderWidth: 2,\n                        data: user_playlists?.items?.map((playlist) => (playlist.tracks.total)),\n                        \n                    }\n                    ]\n                }}\n            />\n\n        <Chart\n        width={'500px'}\n        height={'300px'}\n        chartType=\"Timeline\"\n        loader={<div>Loading Chart</div>}\n        data={[\n            [\n            { type: 'string', id: 'Term' },\n            { type: 'string', id: 'Name' },\n            { type: 'date', id: 'Start' },\n            { type: 'date', id: 'End' },\n            ],\n            ['1', 'George Washington', new Date(1789, 3, 30), new Date(1797, 2, 4)],\n            ['2', 'John Adams', new Date(1797, 2, 4), new Date(1801, 2, 4)],\n            ['3', 'Thomas Jefferson', new Date(1801, 2, 4), new Date(1809, 2, 4)],\n        ]}\n        rootProps={{ 'data-testid': '2' }}\n        />\n\n\n            \n        \n\n \n\n           \n\n        </div>\n\n    )\n\n}\n\nexport default Analytics\n"]},"metadata":{},"sourceType":"module"}