{"ast":null,"code":"var _jsxFileName = \"/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Login.js\";\nimport React from 'react';\nimport \"./Login.css\";\n/* \n\nContains the logic for login and user authentication. \n\nStep one: this page renders the login button. The login button first asks \nusers for permission (the scope specifies which specific actions the \ndeveloper is asking the user to allow). \n\nStep two: if the user gives permission, the Spotify API will return a \nURL with a code on it. It's essentially the token that authenticates that \nour app has received permission from the user.\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  const authEndpoint = 'https://accounts.spotify.com/authorize';\n  const clientId = \"6fda7e982eb7417d8b84b93b446a6a26\"; // link to re-direct user to after user has allowed for authentication \n\n  const redirectUri = 'http://localhost:3000'; // scope specifies what the developer is asking the user permission to do \n\n  const scopes = ['user-top-read', 'user-follow-read', 'user-read-recently-played', 'streaming'];\n  const auth_url = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"login\",\n      href: auth_url,\n      children: \"Login with Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Login.js"],"names":["React","Login","authEndpoint","clientId","redirectUri","scopes","auth_url","join"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAE5B,QAAMC,YAAY,GAAG,wCAArB;AACA,QAAMC,QAAQ,GAAG,kCAAjB,CAH4B,CAK5B;;AACA,QAAMC,WAAW,GAAG,uBAApB,CAN4B,CAQ5B;;AACA,QAAMC,MAAM,GAAG,CACf,eADe,EAEf,kBAFe,EAGf,2BAHe,EAIf,WAJe,CAAf;AAOA,QAAMC,QAAQ,GAAI,GAAEJ,YAAa,cAAaC,QAAS,iBAAgBC,WAAY,UAASC,MAAM,CAACE,IAAP,CAAY,KAAZ,CAAmB,uCAA/G;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI;AAAG,MAAA,SAAS,EAAC,OAAb;AAAqB,MAAA,IAAI,EAAED,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;KAxBuBL,K","sourcesContent":["import React from 'react'\nimport \"./Login.css\"\n\n\n/* \n\nContains the logic for login and user authentication. \n\nStep one: this page renders the login button. The login button first asks \nusers for permission (the scope specifies which specific actions the \ndeveloper is asking the user to allow). \n\nStep two: if the user gives permission, the Spotify API will return a \nURL with a code on it. It's essentially the token that authenticates that \nour app has received permission from the user.\n\n*/\n\nexport default function Login() {\n\n    const authEndpoint = 'https://accounts.spotify.com/authorize';\n    const clientId = \"6fda7e982eb7417d8b84b93b446a6a26\"\n\n    // link to re-direct user to after user has allowed for authentication \n    const redirectUri = 'http://localhost:3000';\n    \n    // scope specifies what the developer is asking the user permission to do \n    const scopes = [\n    'user-top-read',\n    'user-follow-read',\n    'user-read-recently-played',\n    'streaming'\n    ];\n\n    const auth_url = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`\n    \n    return (\n        <div className=\"login-page\">\n            <a className=\"login\" href={auth_url}>Login with Spotify</a>\n            \n        </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}