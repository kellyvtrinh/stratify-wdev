{"ast":null,"code":"var _jsxFileName = \"/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar';\nimport { useDataLayerValue } from '../../src/DataLayer';\nimport \"./Analytics.css\";\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport Chart from \"react-google-charts\";\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Analytics() {\n  _s();\n\n  var _top_track$items, _user_playlists$items, _user_playlists$items2;\n\n  const [{\n    user_playlists,\n    top_track\n  }, dispatch] = useDataLayerValue(); // cardHeight={50} cardWidth={200} itemWidth={800}\n\n  var top_tracks_timeline = new Array(top_track === null || top_track === void 0 ? void 0 : (_top_track$items = top_track.items) === null || _top_track$items === void 0 ? void 0 : _top_track$items.length);\n\n  for (const i in top_track === null || top_track === void 0 ? void 0 : top_track.items) {\n    var track = top_track.items[i];\n    var date = track.album.release_date.split('-');\n    console.log(date);\n\n    var _date = new Date(date[0], date[1], date[2]);\n\n    top_tracks_timeline[i] = [i, track.name, _date, _date];\n  }\n\n  console.log(\"top_tracks_timeline\", top_tracks_timeline);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          labels: user_playlists === null || user_playlists === void 0 ? void 0 : (_user_playlists$items = user_playlists.items) === null || _user_playlists$items === void 0 ? void 0 : _user_playlists$items.map(playlist => playlist.name),\n          datasets: [{\n            label: 'Number of tracks your playlists',\n            backgroundColor: 'rgba(75,33,121,1)',\n            borderColor: 'rgba(0,0,0,1)',\n            borderWidth: 2,\n            data: user_playlists === null || user_playlists === void 0 ? void 0 : (_user_playlists$items2 = user_playlists.items) === null || _user_playlists$items2 === void 0 ? void 0 : _user_playlists$items2.map(playlist => playlist.tracks.total)\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      width: '100px',\n      height: '100px',\n      chartType: \"Timeline\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this),\n      data: [[{\n        type: 'string',\n        id: 'Term'\n      }, {\n        type: 'string',\n        id: 'Name'\n      }, {\n        type: 'date',\n        id: 'Start'\n      }, {\n        type: 'date',\n        id: 'End'\n      }], ...top_tracks_timeline],\n      rootProps: {\n        'data-testid': '2'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Analytics, \"FAT/QTKWYgd0xlD2lsf9wB9vQQ0=\", false, function () {\n  return [useDataLayerValue];\n});\n\n_c = Analytics;\nexport default Analytics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Analytics\");","map":{"version":3,"sources":["/Users/kellytrinh/Desktop/wdev-final-project/final-project/client/src/components/Analytics.js"],"names":["React","useState","Bar","Line","Sidebar","useDataLayerValue","Chart","ChartJS","Analytics","user_playlists","top_track","dispatch","top_tracks_timeline","Array","items","length","i","track","date","album","release_date","split","console","log","_date","Date","name","labels","map","playlist","datasets","label","backgroundColor","borderColor","borderWidth","data","tracks","total","type","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Bar, Line } from 'react-chartjs-2';\nimport Sidebar from './Sidebar'\nimport { useDataLayerValue } from '../../src/DataLayer'\nimport \"./Analytics.css\"\n\nimport { Chart as ChartJS } from 'chart.js/auto'\nimport Chart from \"react-google-charts\";\n \n\n/*\nHomepage: consists of sidebar, favorite artists, and favorite tracks. \nBody component contains favorite artist and favorite tracks.\n*/\n\nfunction Analytics() {\n\n    const [{ user_playlists, top_track }, dispatch] = useDataLayerValue();\n    \n\n    // cardHeight={50} cardWidth={200} itemWidth={800}\n\n\n    var top_tracks_timeline = new Array(top_track?.items?.length);\n\n    for (const i in top_track?.items) {\n        var track = top_track.items[i];\n        var date = track.album.release_date.split('-');\n        console.log(date);\n        var _date = new Date(date[0], date[1], date[2]);\n        top_tracks_timeline[i] = [i, track.name, _date, _date];\n\n    }\n    console.log(\"top_tracks_timeline\", top_tracks_timeline)\n\n \n    return (\n        \n        <div className=\"analytics\">\n            <Sidebar />\n            \n            <div >\n            <Bar\n                data={{\n                    labels: user_playlists?.items?.map((playlist) => (playlist.name)),\n                    datasets: [\n                    {\n                        label: 'Number of tracks your playlists',\n                        backgroundColor: 'rgba(75,33,121,1)',\n                        borderColor: 'rgba(0,0,0,1)',\n                        borderWidth: 2,\n                        data: user_playlists?.items?.map((playlist) => (playlist.tracks.total)),\n                    }\n                    ]\n                }}\n            />\n            </div>\n            \n\n        <Chart\n        width={'100px'}\n        height={'100px'}\n        chartType=\"Timeline\"\n        loader={<div>Loading Chart</div>}\n        data={[\n            [\n            { type: 'string', id: 'Term' },\n            { type: 'string', id: 'Name' },\n            { type: 'date', id: 'Start' },\n            { type: 'date', id: 'End' },\n            ],\n            ...top_tracks_timeline\n        ]}\n        rootProps={{ 'data-testid': '2' }}\n        />\n\n\n            \n        \n\n \n\n           \n\n        </div>\n\n    )\n\n}\n\nexport default Analytics\n"]},"metadata":{},"sourceType":"module"}